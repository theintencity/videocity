<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2009-2011, Kundan Singh. See LICENSING for details. -->

<!--
This is a full-screen button control, that also handles the full screen state change on the stage object.
There are static properties to indicate the current full-screen state, as well as to class methods to change
to full screen mode optionally with hardware stretching.
-->

<controls:BButton xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:controls="my.controls.*" 
	toggle="true" click="fullScreenButtonHandler(event)" addedToStage="addHandler(event)" removedFromStage="removeHandler(event)">
	
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.containers.Canvas;
			
			//--------------------------------------
			// CLASS VARIABLES
			//--------------------------------------
			
			[Bindable]
			/**
			 * The global property indicates whether we are currently in full-screen mode or not?
			 */
			public static var fullScreen:Boolean = false;
			
			//--------------------------------------
			// STATIC METHODS
			//--------------------------------------
			
			/**
			 * The method allows toggling the full-screen state of the application. The optional parameter
			 * controls whether hardware scaling is desired or not? If true, the whole application is stretched,
			 * otherwise just the width/height of the application is set to full screen.
			 * 
			 * @param stretch Whether to use hardware scaling to stretch or not? Default is false.
			 */
			public static function toggleFullScreen(stretch:Boolean = false, rect:Rectangle = null):void
			{
				var stage:Stage = Application.application.stage;
				if (stage != null) {
					if (stretch && stage.hasOwnProperty('fullScreenSourceRect')) {
						if (rect == null) {
							stage.fullScreenSourceRect = new Rectangle(0, 0, Application.application.width, Application.application.height);
						}
						else {
							stage.fullScreenSourceRect = rect;
						}
					}
					stage.displayState = stage.displayState == StageDisplayState.FULL_SCREEN ? StageDisplayState.NORMAL : StageDisplayState.FULL_SCREEN;
				}
			}
			
			/**
			 * Method to start the screen selection to stretch to full screen.
			 */
			public static function startSelectScreen():void
			{
				if (!FullScreen.fullScreen) {
					PostIt.show("<b>Drag &amp; Select<br/>a region</b>", Application.application.root);
					Application.application.mouseChildren = false;
					Application.application.addEventListener(MouseEvent.MOUSE_DOWN, selectMouseDownHandler, false, 0, true);
				}
			}
			
			//--------------------------------------
			// PRIVATE METHODS
			//--------------------------------------
			
			private function addHandler(event:Event):void
			{
				if (stage != null) 
					stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler, false, 0, true);
			}
			
			private function removeHandler(event:Event):void
			{
				if (stage != null)
					stage.removeEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
			}
			
			private function fullScreenHandler(event:FullScreenEvent):void
			{
				if (FullScreen.fullScreen != event.fullScreen) 
					FullScreen.fullScreen = event.fullScreen;
				this.selected = event.fullScreen;
				if (!event.fullScreen && stage != null && stage.hasOwnProperty("fullScreenSourceRect"))
					stage.fullScreenSourceRect = null;
			}
			
			private function fullScreenButtonHandler(event:Event):void
			{
				if (stage != null) {
					stage.displayState = stage.displayState == StageDisplayState.FULL_SCREEN ? StageDisplayState.NORMAL : StageDisplayState.FULL_SCREEN;
				}
			}
			
			/*
			 * Select a part of the screen to stretch.
			 */
			
			private static var dragRect:Canvas = null;
			
			private static function selectMouseDownHandler(event:MouseEvent):void
			{
				Application.application.removeEventListener(MouseEvent.MOUSE_DOWN, selectMouseDownHandler);
				Application.application.addEventListener(MouseEvent.MOUSE_UP, selectMouseUpHandler, false, 0, true);
				Application.application.addEventListener(MouseEvent.MOUSE_MOVE, selectMouseMoveHandler, false, 0, true);
				dragRect = new Canvas();
				dragRect.setStyle("borderStyle", "solid");
				dragRect.setStyle("borderColor", 0xffffff);
				dragRect.setStyle("borderThickness", 1);
				dragRect.setStyle("backgroundAlpha", 0);
				dragRect.x = Application.application.mouseX;
				dragRect.y = Application.application.mouseY;
				dragRect.width = dragRect.height = 0;
				Application.application.addChild(dragRect);
			}
			
			private static function selectMouseMoveHandler(event:MouseEvent):void
			{
				if (dragRect != null) {
					dragRect.width = Application.application.mouseX - dragRect.x;
					dragRect.height = Application.application.mouseY - dragRect.y;
				}
			}
			
			private static function selectMouseUpHandler(event:MouseEvent):void
			{
				Application.application.mouseChildren = true;
				Application.application.removeEventListener(MouseEvent.MOUSE_UP, selectMouseUpHandler);
				Application.application.removeEventListener(MouseEvent.MOUSE_MOVE, selectMouseMoveHandler);
				
				if (dragRect != null) {
					var rect:Rectangle = new Rectangle(dragRect.x, dragRect.y, dragRect.x+dragRect.width, dragRect.y+dragRect.height);
					Application.application.removeChild(dragRect);
					dragRect = null;
					
					trace("rect=" + rect.x + "," + rect.y + " " + rect.width + "x" + rect.height);
					if (rect.width >= 10 && rect.height >= 10) {
						FullScreen.toggleFullScreen(true, rect);
					}
				}
			}
			
		]]>
	</mx:Script>
</controls:BButton>
